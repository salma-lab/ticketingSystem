Voici un guide détaillé pour créer la partie frontend de votre application CRUD étape par étape, en précisant où placer les fichiers et comment les intégrer au projet .NET.

Structure du projet frontend

Votre frontend sera composé des fichiers HTML, CSS et JavaScript. Voici la structure recommandée :

ProductApi
│
├── wwwroot
│   ├── index.html
│   ├── css
│   │   └── styles.css
│   ├── js
│   │   └── app.js

Étape 1 : Créer le dossier pour les fichiers frontend
	1.	Localisation : Tous les fichiers frontend doivent être placés dans le dossier wwwroot de votre projet ASP.NET Core.
	•	wwwroot est le dossier public accessible par les utilisateurs (fichiers statiques comme HTML, CSS, JavaScript, images, etc.).
	2.	Si le dossier wwwroot n’existe pas encore dans votre projet, créez-le à la racine.

Étape 2 : Créer les fichiers frontend

1. HTML : index.html

Chemin : wwwroot/index.html
Créez un fichier nommé index.html avec le contenu suivant :

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Product Management</title>
    <link rel="stylesheet" href="css/styles.css">
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
</head>
<body>
    <h1>Gestion des Produits</h1>
    <div id="product-form">
        <input type="text" id="name" placeholder="Nom">
        <input type="text" id="description" placeholder="Description">
        <input type="number" id="price" placeholder="Prix">
        <input type="number" id="stock" placeholder="Stock">
        <button id="add-product">Ajouter le produit</button>
    </div>
    <table id="product-table">
        <thead>
            <tr>
                <th>ID</th>
                <th>Nom</th>
                <th>Description</th>
                <th>Prix</th>
                <th>Stock</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody></tbody>
    </table>
    <script src="js/app.js"></script>
</body>
</html>

2. CSS : styles.css

Chemin : wwwroot/css/styles.css
Créez un fichier nommé styles.css pour styliser votre interface utilisateur :

body {
    font-family: Arial, sans-serif;
    margin: 20px;
    padding: 0;
    background-color: #f4f4f9;
}

h1 {
    color: #333;
    text-align: center;
}

#product-form {
    margin-bottom: 20px;
    display: flex;
    gap: 10px;
    justify-content: center;
}

#product-form input {
    padding: 5px;
    font-size: 14px;
}

button {
    padding: 5px 10px;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #0056b3;
}

#product-table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

#product-table th, #product-table td {
    border: 1px solid #ccc;
    padding: 8px;
    text-align: center;
}

#product-table th {
    background-color: #007bff;
    color: white;
}

3. JavaScript : app.js

Chemin : wwwroot/js/app.js
Créez un fichier nommé app.js pour la logique CRUD en JavaScript avec jQuery :

const apiUrl = "/api/Product";

function loadProducts() {
    $.get(apiUrl, function (data) {
        const rows = data.map(product => `
            <tr>
                <td>${product.id}</td>
                <td>${product.name}</td>
                <td>${product.description}</td>
                <td>${product.price}</td>
                <td>${product.stock}</td>
                <td>
                    <button onclick="deleteProduct(${product.id})">Supprimer</button>
                </td>
            </tr>
        `);
        $("#product-table tbody").html(rows.join(''));
    });
}

$("#add-product").click(function () {
    const product = {
        name: $("#name").val(),
        description: $("#description").val(),
        price: parseFloat($("#price").val()),
        stock: parseInt($("#stock").val())
    };
    $.post(apiUrl, product, loadProducts);
});

function deleteProduct(id) {
    $.ajax({
        url: `${apiUrl}/${id}`,
        type: 'DELETE',
        success: loadProducts
    });
}

loadProducts();

Étape 3 : Configurer votre projet pour servir les fichiers statiques
	1.	Dans Program.cs, activez la prise en charge des fichiers statiques :

var app = builder.Build();

app.UseDefaultFiles(); // Optionnel : Sert automatiquement index.html par défaut
app.UseStaticFiles();  // Active les fichiers statiques dans wwwroot

app.MapControllers();

app.Run();

	2.	Lorsque vous démarrez le projet, accédez à votre navigateur avec l’URL suivante pour voir l’interface frontend :

http://localhost:5000/index.html

Étape 4 : Tester la communication API
	1.	Assurez-vous que votre backend est fonctionnel (par exemple, avec Swagger ou Postman).
	2.	Testez les fonctionnalités frontend :
	•	Ajouter un produit.
	•	Afficher la liste des produits.
	•	Supprimer un produit.

Étape 5 : Ajouter à votre dépôt Git

Ajoutez les fichiers frontend au dépôt Git pour CI/CD :

git add wwwroot/
git commit -m "Ajout des fichiers frontend"
git push

Souhaitez-vous une assistance pour configurer le pipeline CI/CD avec Azure DevOps ?
